.deco {

    /* width: 17rem; */
    top: 0px;
    position: absolute;
    right: 0px;
  
  }
  
  .deco2 {
    /* transform: rotate(-23deg); */
    /* width: 17rem; */
    position: absolute;
    left: 0px;
    top: -50px;
  
  }
  
  .deco3 {
    /* width: 17rem; */
    position: absolute;
    left: 0px;
    bottom: 0px;
  
  }
  
  .deco4 {
    /* width: 32rem; */
    position: absolute;
    right: -170px;
    bottom: 0px;
    z-index: 0;
  
  }

  .Boxnotif{
    position: fixed;
    z-index: 10000;
    bottom: 7%;
    right: 3%;
}


    /* {Décorations blob}
    <img className={`${s.deco} hidden lg:block md:block z-0`} src="./assets/image/deco/15.png" alt="15" width={250} />
    <img className={`${s.deco2} hidden lg:block md:block z-0`} src="./assets/image/deco/14.png" width={275} alt="14" />
    <img className={`${s.deco3} hidden lg:block md:block z-0`} src="./assets/image/deco/10.png" width={225} alt="" />
    <img className={`${s.deco4} hidden lg:block md:block z-0`} src="./assets/image/deco/11.png" width={500} alt="11" /> */


    /* <motion.div
    initial={{ opacity: 0, x: 100 }}
    animate={{ opacity: 1, x: 0 }}
    transition={{ duration: 0.5 }}
  > */
/* 
    onSubmit: (values) => {
            const data = { ...values, date: selectedDate };
            axios.post("URL de martinoh", data)
                .then((res) => {
                    console.log("Réservation réussie :", res.data);
                    alert("rdv accomplie");
                    formik.resetForm();
                    setSelectedDate(null);
                    setStep(1);
                })
                .catch((error) => {
                    console.error("Erreur  :", error);
                    alert("Une erreur s'est produite. Veuillez réessayer.");
                });
        }, */







        /* import React, { Fragment, useState } from "react";
import { useFormik } from "formik";
import s from "./reservation.module.css";
import * as Yup from "yup"; // Importation de Yup
import axios from "axios";
import Calendar from "react-calendar";
import "react-calendar/dist/Calendar.css";
import Navbar from "../../components/navbar/Navbar";
import { motion } from "framer-motion";

// Validation du schéma
const validationSchema = Yup.object({
    name: Yup.string().required("Le nom est requis"),
    email: Yup.string().email("Email invalide").required("L'email est requis"),
    phone: Yup.string().required("Le numéro de téléphone est requis"),
    doctor: Yup.string().required("Veuillez choisir un médecin"),
    time: Yup.string().required("L'heure est requise"),
});

const Reservation: React.FC = () => {
    const [step, setStep] = useState(1);
    const [selectedDate, setSelectedDate] = useState<Date | null>(null);

    const doctors = [
        { id: 1, name: "Dr. Dupont" },
        { id: 2, name: "Dr. Martin" },
        { id: 3, name: "Dr. Bernard" },
    ];

    const formik = useFormik({
        initialValues: {
            name: "",
            email: "",
            phone: "",
            doctor: "",
            time: "",
            notes: "",
        },
        validationSchema,
        onSubmit: (values) => {
            const data = { ...values, date: selectedDate };
            axios.post("URL de martinoh", data)
                .then((res) => {
                    console.log("Réservation réussie :", res.data);
                    alert("rdv accomplie");
                    formik.resetForm();
                    setSelectedDate(null);
                    setStep(1);
                })
                .catch((error) => {
                    console.error("Erreur  :", error);
                    alert("Une erreur s'est produite. Veuillez réessayer.");
                });
        },
    });

    const nextStep = () => {
        if (step === 1 && !isStepValid(1)) return;
        if (step === 2 && !isStepValid(2)) return;
        setStep((prev) => Math.min(prev + 1, 3));
    };

    const prevStep = () => setStep((prev) => Math.max(prev - 1, 1));

    // Fonction pour valider les étapes
    const isStepValid = (currentStep: number) => {
        if (currentStep === 1) {
            return (
                formik.values.name.trim() !== "" &&
                formik.values.email.trim() !== "" &&
                formik.values.phone.trim() !== ""
            );
        } else if (currentStep === 2) {
            return (
                formik.values.doctor !== "" &&
                selectedDate !== null
            );
        }
        return true;
    };

    return (
        <Fragment>

            <Navbar />
            <div className="bg-[#f5f5f5] h-screen pt-16 flex items-center justify-center  relative overflow-hidden">
                <motion.div
                    initial={{ opacity: 0, scale: 0.8 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 1 }}
                    className="bg-white border-4 rounded-lg shadow m-10 max-w-4xl w-full"
                >                    <div className="flex items-start justify-between p-5 border-b rounded-t">
                        <h3 className="text-xl font-semibold">Réservation de Rendez-vous</h3>
                    </div>
                    <div className="p-6 space-y-6">
                        <form onSubmit={formik.handleSubmit}>
                            {step === 1 && (
                                <motion.div
                                    initial={{ opacity: 0, x: 100 }}
                                    animate={{ opacity: 1, x: 0 }}
                                    transition={{ duration: 0.8 }}
                                >
                                    <h4 className="text-lg font-semibold">Étape 1: Informations Personnelles</h4>
                                    <label htmlFor="name" className="text-sm font-medium text-gray-900 block mb-2">Nom complet:</label>
                                    <input
                                        type="text"
                                        id="name"
                                        name="name"
                                        onChange={formik.handleChange}
                                        onBlur={formik.handleBlur}
                                        value={formik.values.name}
                                        className="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-cyan-600 focus:border-cyan-600 block w-full p-2.5 mb-4"
                                    />



                                    {formik.touched.name && formik.errors.name ? <div className="text-red-600">{formik.errors.name}</div> : null}
                                    <label htmlFor="email" className="text-sm font-medium text-gray-900 block mb-2">Adresse e-mail:</label>
                                    <input
                                        type="email"
                                        id="email"
                                        name="email"
                                        onChange={formik.handleChange}
                                        onBlur={formik.handleBlur}
                                        value={formik.values.email}
                                        className="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-cyan-600 focus:border-cyan-600 block w-full p-2.5 mb-4"
                                    />
                                    {formik.touched.email && formik.errors.email ? <div className="text-red-600">{formik.errors.email}</div> : null}
                                    <label htmlFor="phone" className="text-sm font-medium text-gray-900 block mb-2">Numéro de téléphone:</label>
                                    <input
                                        type="tel"
                                        id="phone"
                                        name="phone"
                                        onChange={formik.handleChange}
                                        onBlur={formik.handleBlur}
                                        value={formik.values.phone}
                                        className="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-cyan-600 focus:border-cyan-600 block w-full p-2.5"
                                    />
                                    {formik.touched.phone && formik.errors.phone ? <div className="text-red-600">{formik.errors.phone}</div> : null}
                                </motion.div>
                            )}
                            {step === 2 && (
                                <motion.div
                                    initial={{ opacity: 0, x: 100 }}
                                    animate={{ opacity: 1, x: 0 }}
                                    transition={{ duration: 0.7 }}
                                >
                                    <h4 className="text-lg font-semibold">Étape 2: Choisir un Médecin et une Date</h4>
                                    <label htmlFor="doctor" className="text-sm font-medium text-gray-900 block mb-2">Choisissez un médecin:</label>
                                    <select
                                        id="doctor"
                                        name="doctor"
                                        onChange={formik.handleChange}
                                        onBlur={formik.handleBlur}
                                        value={formik.values.doctor}
                                        className="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-cyan-600 focus:border-cyan-600 block w-full p-2.5 mb-4"
                                    >
                                        <option value="">Sélectionnez un médecin</option>
                                        {doctors.map((doctor) => (
                                            <option key={doctor.id} value={doctor.id}>{doctor.name}</option>
                                        ))}
                                    </select>
                                    {formik.touched.doctor && formik.errors.doctor ? <div className="text-red-600">{formik.errors.doctor}</div> : null}
                                    <label htmlFor="date" className="text-sm font-medium text-gray-900 block mb-2">Date du rendez-vous:</label>
                                    <Calendar  {...(undefined as any)}
                                        onChange={(date: Date | null) => setSelectedDate(date)}
                                        value={selectedDate}
                                        className={` ${s.calendar} shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text- rounded-lg focus:ring-cyan-600 focus:border-cyan-600 block w-full p-2.5`}
                                    />
                                </motion.div>

                            )}
                            {step === 3 && (
                                <motion.div
                                    initial={{ opacity: 0, x: 100 }}
                                    animate={{ opacity: 1, x: 0 }}
                                    transition={{ duration: 0.7 }}
                                >

                                    <h4 className="text-lg font-semibold">Étape 3: Heure et Notes</h4>

                                    <label htmlFor="time" className="text-sm font-medium text-gray-900 block mb-2">Heure du rendez-vous:</label>
                                    <input
                                        type="time"
                                        id="time"
                                        name="time"
                                        onChange={formik.handleChange}
                                        onBlur={formik.handleBlur}
                                        value={formik.values.time}
                                        className="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-cyan-600 focus:border-cyan-600 block w-full p-2.5 mb-4"
                                    />
                                    {formik.touched.time && formik.errors.time ? <div className="text-red-600">{formik.errors.time}</div> : null}
                                    <label htmlFor="notes" className="text-sm font-medium text-gray-900 block mb-2">Remarques:</label>
                                    <textarea
                                        id="notes"
                                        name="notes"
                                        onChange={formik.handleChange}
                                        value={formik.values.notes}
                                        className="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-cyan-600 focus:border-cyan-600 block w-full p-2.5 mb-4"
                                    />
                                </motion.div>
                            )}
                            <div className="flex justify-between mt-4">
                                {step > 1 && (
                                    <button
                                        type="button"
                                        onClick={prevStep}
                                        className="text-white bg-red-600 hover:bg-red-700 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5"
                                    >
                                        Précédent
                                    </button>
                                )}
                                {step < 3 ? (
                                    <button
                                        type="button"
                                        onClick={nextStep}
                                        disabled={!isStepValid(step)}
                                        className={` ${isStepValid(step) ? "bg-black" : "bg-red-500"}  text-white bg-cyan-600 hover:bg-cyan-700 focus:ring-4 focus:outline-none focus:ring-cyan-300 font-medium rounded-lg text-sm px-5 py-2.5`}
                                    >
                                        Suivant
                                    </button>
                                ) : (
                                    <button
                                        type="submit"
                                        className="text-white bg-cyan-600 hover:bg-cyan-700 focus:ring-4 focus:outline-none focus:ring-cyan-300 font-medium rounded-lg text-sm px-5 py-2.5"
                                    >
                                        Soumettre
                                    </button>
                                )}
                            </div>
                        </form>
                    </div>
                </motion.div>



            </div>
        </Fragment >
    );
};

export default Reservation; */
